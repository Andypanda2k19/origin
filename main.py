import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram import F
import sys
from os import getenv
from typing import Any, Dict
import bot
import sqlite3
from aiogram import Bot, Dispatcher, F, Router, html
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)

conn = sqlite3.connect('db.db')
cur = conn.cursor()
cur.execute("""CREATE TABLE IF NOT EXISTS users(user_id INTEGER, block INTEGER);""")
conn.commit()


# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token="6571705606:AAH94j0JwRKGu0YeXkeXur4L6jGgNB7_wDo", parse_mode='html')
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()


@dp.message( F.text == "üì¶ –¢–æ–≤–∞—Ä—ã")
async def cmd_random(message: types.Message):
    def get_keyboard():
        buttons = [
            [
                types.InlineKeyboardButton(text="‚≠ê –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", url="https://t.me/erick_des"),
                types.InlineKeyboardButton(text="üî∂ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="make_order"),

            ],
            [types.InlineKeyboardButton(text="üõ° –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞(offline)", callback_data="support")]
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        return keyboard

    await message.answer(
        "‚≠ê –í—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=get_keyboard()
    )

@dp.message( F.text == "üì± –ü—Ä–æ—Ñ–∏–ª—å")
async def cmd_random(message: types.Message):

    await message.answer(
        "‚≠ê‚îú –ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ :)")

@dp.callback_query(F.data == "back")
async def back(callback: types.CallbackQuery):
    def get_keyboard():
        buttons = [
            [
                types.InlineKeyboardButton(text="‚≠ê –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", url="https://t.me/erick_des"),
                types.InlineKeyboardButton(text="üî∂ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="make_order"),

            ],
            [types.InlineKeyboardButton(text="üõ° –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞(offline)", callback_data="support")]
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        return keyboard

    await callback.message.edit_text(
        "‚≠ê –í—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=get_keyboard()
    )
@dp.message(Command("start"))
async def cmd_random(message: types.Message):

    def get_keyboard():
        buttons = [
            [
                types.KeyboardButton(text="üì± –ü—Ä–æ—Ñ–∏–ª—å"),
                types.KeyboardButton(text="üì¶ –¢–æ–≤–∞—Ä—ã")

            ],
            [types.KeyboardButton(text="üî∞ F.A.Q")]
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True,)
        return keyboard

    await message.answer(
        "‚≠ê –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥! –≠—Ç–æ—Ç –±–æ—Ç - –º–æ–π –æ–±–∏—Ç–µ–ª—å. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –≤—Å—é –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–±—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—ã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.",
        reply_markup=get_keyboard()
    )


@dp.callback_query(F.data == "make_order")
async def send_random_value(callback: types.CallbackQuery):
    def get_keyboard():
        buttons = [

            [types.InlineKeyboardButton(text="üåÑ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data="design")],

            [types.InlineKeyboardButton(text="üñ• –ú–æ–Ω—Ç–∞–∂ –≤–∏–¥–µ—Ä–æ–ª–∏–∫–æ–≤", callback_data="design")],

            [types.InlineKeyboardButton(text="üéÜ –ê–Ω–∏–º–∞—Ü–∏—è", callback_data="design")],

            [types.InlineKeyboardButton(text="‚öô 3D –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data="design")],

            [types.InlineKeyboardButton(text="üíº UI/UX –º–∞–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="design")],
            [types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞–∑–∞–¥", callback_data="back")],

        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        return keyboard

    await  callback.message.edit_text('<b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–æ–≤–∞—Ä. –ï—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ - –Ω–∞–ø–∏—à–∏—Ç–µ –æ–± —ç—Ç–æ–º –≤ —Ç–∑</b>',
                                  reply_markup=get_keyboard())


@dp.callback_query(F.data == "design")
async def send_random_value(callback: types.CallbackQuery):
    def get_keyboard():
        buttons = [

            [types.InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="descr_order")],

        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        return keyboard

    await  callback.message.edit_text(
        '‚ôª –ü—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å–∞—Ç—å –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –¥–∏–∑–∞–π–Ω—É/–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é.'
        '\n\n<b>‚ùó –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å—Ç—É–¥–∏–∏.</b>',
        reply_markup=get_keyboard())


class iio(StatesGroup):
    descr = State()


@dp.callback_query(F.data == "descr_order")
async def get_order_descr(callback: types.CallbackQuery, state: FSMContext) -> None:
    def get_keyboard():
        buttons = [

            [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="descr_order_cancel")],

        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        return keyboard

    await state.set_state(iio.descr)
    await  callback.message.edit_text(
        '–ù–∞–ø–∏—à–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –æ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –í–∞—à'
        ' –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É, –í–∞–º –ø—Ä–∏–¥—ë—Ç –æ–ø–æ–≤–æ—â–µ–Ω–∏–µ —Å –¥–∞–ª—å–Ω–µ–π—à–∏–º–∏ —É–∫–∞–∑–∞–Ω–∏—è–º–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –¥–ª—è —Å–≤—è–∑–∏.',
        reply_markup=get_keyboard())

@dp.callback_query(F.data == "descr_order_cancel")
async def get_order_descr(callback: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()

    def get_keyboard():
        buttons = [

            [types.InlineKeyboardButton(text="üåÑ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data="design")],

            [types.InlineKeyboardButton(text="üñ• –ú–æ–Ω—Ç–∞–∂ –≤–∏–¥–µ—Ä–æ–ª–∏–∫–æ–≤", callback_data="design")],

            [types.InlineKeyboardButton(text="üéÜ –ê–Ω–∏–º–∞—Ü–∏—è", callback_data="design")],

            [types.InlineKeyboardButton(text="‚öô 3D –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data="design")],

            [types.InlineKeyboardButton(text="üíº UI/UX –º–∞–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="design")],
            [types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞–∑–∞–¥", callback_data="back")],

        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        return keyboard

    await  callback.message.edit_text('<b>–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–æ–≤–∞—Ä. –ï—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ - –Ω–∞–ø–∏—à–∏—Ç–µ –æ–± —ç—Ç–æ–º –≤ —Ç–∑</b>',
                                  reply_markup=get_keyboard())

@dp.message(iio.descr)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(descr=message.text)
    await state.clear()

    def get_keyboard():
        buttons = [
            [types.InlineKeyboardButton(text="–û–±—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data="allow_order")],
            [types.InlineKeyboardButton(text="–û—Ç–∫–∞–∑", callback_data="cancel_new_ord")],


        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        return keyboard

    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    await message.reply(f"<b>–û–∂–∏–¥–∞–π—Ç–µ, –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>")

    await bot.send_message(-4118194438,f"{message.text},\n\n@{message.from_user.username} ")
    await bot.send_message(-4118194438,
                           f"{message.from_user.id}",
                           reply_markup=get_keyboard())

@dp.callback_query(F.data == "cancel_new_ord")
async def allow_order_descr(callback: types.CallbackQuery,):
    await callback.message.answer(
        '<b>‚ùå –î–∏–∑–∞–π–Ω–µ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –í–∞—à –∑–∞–∫–∞–∑. –≠—Ç–æ –º–æ–≥–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –ø–æ —Ä—è–¥—É —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–∏—á–∏–Ω:\n\n1.–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Å—Ç–∞–≤–∏–ª–∏ –¢–ó\n2.–í–æ–∑–º–æ–∂–Ω–æ, –º—ã –µ—â–µ –Ω–µ –º–æ–∂–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–∞–∫–æ–π –∑–∞–∫–∞–∑\n3.–î–∏–∑–∞–π–Ω–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω</b>')
    await bot.send_message(callback.message.text, '<b>‚ùå –î–∏–∑–∞–π–Ω–µ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –í–∞—à –∑–∞–∫–∞–∑. –≠—Ç–æ –º–æ–≥–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –ø–æ —Ä—è–¥—É —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–∏—á–∏–Ω:\n\n1.–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Å—Ç–∞–≤–∏–ª–∏ –¢–ó\n2.–í–æ–∑–º–æ–∂–Ω–æ, –º—ã –µ—â–µ –Ω–µ –º–æ–∂–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–∞–∫–æ–π –∑–∞–∫–∞–∑\n3.–î–∏–∑–∞–π–Ω–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω</b>')


@dp.callback_query(F.data == "allow_order")
async def allow_order_descr(callback: types.CallbackQuery,):
    await callback.message.answer(
        '<b>‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫–∞ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –¥–∏–∑–∞–π–Ω–µ—Ä</b>')
    await bot.send_message(callback.message.text, '<b>‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫–∞ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –¥–∏–∑–∞–π–Ω–µ—Ä</b>')
    


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
